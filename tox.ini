[tox]
envlist = py310,py311,lint,requirements,precommit,test

[flake8]
exclude = repository_service_tuf_worker/__init__.py,venv,.venv,settings.py,.git,.tox,dist,docs,*lib/python*,*egg,build,tools

[testenv]
setenv =
    RSTUF_WORKER_ID = "test"
    RSTUF_BROKER_SERVER = fakeserver
    RSTUF_REDIS_SERVER = redis://fake-redis
    RSTUF_SQL_SERVER = postgresql://fake-sql
    RSTUF_STORAGE_BACKEND = LocalStorage
    RSTUF_LOCAL_STORAGE_BACKEND_PATH = ./data-test/s
    RSTUF_KEYVAULT_BACKEND = LocalKeyVault
    RSTUF_LOCAL_KEYVAULT_PATH = ./data-test/kv
    RSTUF_LOCAL_KEYVAULT_KEYS = "online.key,strongPass"
    DATA_DIR = ./data-test

deps = -r{toxinidir}/requirements.txt
       -r{toxinidir}/requirements-dev.txt

[testenv:lint]
deps = pre-commit
setenv =
    BLACK_CACHE_DIR = ~/.cache/black/
commands =
    pre-commit run flake8 --all-files --show-diff-on-failure
    pre-commit run isort --all-files --show-diff-on-failure
    pre-commit run black --all-files --show-diff-on-failure
    pre-commit run bandit --all-files --show-diff-on-failure

[testenv:test]
commands =
    python -m pytest --cov-report=xml --cov-report=term --cov-config=tox.ini --cov -n auto -vv tests/

[run]
omit = tests/*

[testenv:requirements]
description="Check if `make requirements` is up-to-date."
deps = pipenv
skipsdist=false
allowlist_externals =
    bash
commands =
    pipenv --version
    bash -c 'diff -w requirements.txt <(pipenv requirements)'
    bash -c 'diff -w requirements-dev.txt <(pipenv requirements --dev)'

[testenv:precommit]
description="Check if `pre-commit autoupdate` is up-to-date."
deps = pre-commit
skipsdist=false
allowlist_externals =
    bash
commands =
    pre-commit --version
    bash -c 'cp .pre-commit-config.yaml tmp-tox-precommit.yaml'
    bash -c 'pre-commit autoupdate'
    bash -c 'if ! diff -w .pre-commit-config.yaml tmp-tox-precommit.yaml; \
            then echo "⚠️ [WARNING] pre-commit hooks are outdated. To update them run: pre-commit autoupdate"; fi'
    bash -c 'cp tmp-tox-precommit.yaml .pre-commit-config.yaml'
    bash -c 'rm tmp-tox-precommit.yaml'

[testenv:docs]
deps = -r{toxinidir}/docs/requirements.txt
       -r{toxinidir}/requirements-dev.txt

allowlist_externals =
    plantuml
commands =
    plantuml -Djava.awt.headless=true -o ../source/_static/ -tpng docs/diagrams/*.puml
	sphinx-apidoc -f -o docs/source/devel/ repository_service_tuf_worker
	sphinx-build -E -W -b html docs/source docs/build/html


[gh-actions]
python =
    3.10: py310,pep8,lint,requirements,precommit,test
    3.11: py311,pep8,lint,requirements,precommit,test

[testenv:local-aws-kms]
deps =
    -r{toxinidir}/requirements-dev.txt
    localstack

allowlist_externals =
    localstack
    bash

setenv =
    DATA_DIR = ./data-test
    RSTUF_AWS_ACCESS_KEY_ID = test
    RSTUF_AWS_SECRET_ACCESS_KEY = test
    RSTUF_AWS_ENDPOINT_URL = http://localhost:4566/
    RSTUF_AWS_DEFAULT_REGION = us-east-1

commands_pre =
    # Start virtual AWS KMS
    localstack start --detached
    localstack wait

    # Create signing key
    bash {toxinidir}/tests/files/aws/init-kms.sh

commands =
    python3 -m pytest tests/unit/tuf_repository_service_worker/test_signer.py -k test_get_from_aws

commands_post =
    # Stop virtual AWS KMS
    localstack stop

# Requires `vault`
# https://developer.hashicorp.com/vault/tutorials/getting-started/getting-started-install
[testenv:local-vault]
deps =
    -r{toxinidir}/requirements-dev.txt
    # TODO: add hvac to Pipfile, requirements.txt
    hvac

allowlist_externals =
    bash

setenv =
    DATA_DIR = ./data-test
    RSTUF_VAULT_ADDR = http://localhost:8200
    RSTUF_VAULT_TOKEN = test-root-token

commands_pre =
    bash {toxinidir}/tests/files/vault/init.sh

commands =
    python3 -m pytest tests/unit/tuf_repository_service_worker/test_signer.py -k test_get_from_vault -vv

commands_post =
    bash {toxinidir}/tests/files/vault/stop.sh
